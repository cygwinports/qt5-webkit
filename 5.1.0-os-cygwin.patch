--- origsrc/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/API/JSStringRef.h	2013-07-02 02:10:30.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/API/JSStringRef.h	2013-08-18 14:31:06.864372400 -0500
@@ -37,7 +37,7 @@
 extern "C" {
 #endif
 
-#if !defined(WIN32) && !defined(_WIN32) \
+#if !defined(WIN32) && !defined(_WIN32) && !defined(__CYGWIN__) \
     && !((defined(__CC_ARM) || defined(__ARMCC__)) && !defined(__linux__)) /* RVCT */
 /*!
 @typedef JSChar
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/icu/unicode/platform.h	2013-07-02 02:10:29.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/icu/unicode/platform.h	2013-08-18 14:31:48.827772500 -0500
@@ -227,8 +227,12 @@
 #endif
 
 #ifndef U_SIZEOF_WCHAR_T
+#ifdef __CYGWIN__
+#define U_SIZEOF_WCHAR_T    2
+#else
 #define U_SIZEOF_WCHAR_T    4
 #endif
+#endif
 
 #ifndef U_HAVE_WCSCPY
 #define U_HAVE_WCSCPY       1
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/icu/unicode/umachine.h	2013-07-02 02:10:29.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/icu/unicode/umachine.h	2013-08-18 14:39:45.980064100 -0500
@@ -282,7 +282,7 @@ typedef int8_t UBool;
 #       if (U_SIZEOF_WCHAR_T==4)
 #           define U_WCHAR_IS_UTF32
 #       endif
-#   elif defined(U_WINDOWS)
+#   elif defined(U_WINDOWS) || defined(__CYGWIN__)
 #       define U_WCHAR_IS_UTF16
 #   endif
 #endif
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/jit/JITOpcodes.cpp	2013-07-02 02:10:28.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/jit/JITOpcodes.cpp	2013-08-18 22:41:37.226692800 -0500
@@ -244,7 +244,7 @@ JIT::Label JIT::privateCompileCTINativeC
     peek(regT1);
     emitPutToCallFrameHeader(regT1, JSStack::ReturnPC);
 
-#if !OS(WINDOWS)
+#if !OS(WINDOWS) && !OS(CYGWIN)
     // Calling convention:      f(edi, esi, edx, ecx, ...);
     // Host function signature: f(ExecState*);
     move(callFrameRegister, X86Registers::edi);
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/jit/JITStubs.cpp	2013-07-02 02:10:28.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/jit/JITStubs.cpp	2013-08-18 14:43:20.278321200 -0500
@@ -366,7 +366,7 @@ SYMBOL_STRING(ctiOpThrowNotCaught) ":" "
 
 #else // USE(JSVALUE32_64)
 
-#if COMPILER(GCC) && CPU(X86_64) && !OS(WINDOWS)
+#if COMPILER(GCC) && CPU(X86_64) && !OS(WINDOWS) && !OS(CYGWIN)
 
 // These ASSERTs remind you that, if you change the layout of JITStackFrame, you
 // need to change the assembly trampolines below to match.
@@ -435,7 +435,7 @@ SYMBOL_STRING(ctiOpThrowNotCaught) ":" "
     "ret" "\n"
 );
 
-#elif COMPILER(GCC) && CPU(X86_64) && OS(WINDOWS)
+#elif COMPILER(GCC) && CPU(X86_64) && (OS(WINDOWS) || OS(CYGWIN))
 
 // These ASSERTs remind you that, if you change the layout of JITStackFrame, you
 // need to change the assembly trampolines below to match.
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/jit/JITStubs.h	2013-07-02 02:10:28.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/jit/JITStubs.h	2013-08-18 15:14:24.670958400 -0500
@@ -99,7 +99,7 @@ namespace JSC {
         MacroAssemblerCodePtr ctiNativeConstruct;
     };
 
-#if !OS(WINDOWS) && CPU(X86_64)
+#if !OS(WINDOWS) && !OS(CYGWIN) && CPU(X86_64)
     struct JITStackFrame {
         void* reserved; // Unused
         JITStubArg args[6];
@@ -123,7 +123,7 @@ namespace JSC {
         // When JIT code makes a call, it pushes its return address just below the rest of the stack.
         ReturnAddressPtr* returnAddressSlot() { return reinterpret_cast<ReturnAddressPtr*>(this) - 1; }
     };
-#elif OS(WINDOWS) && CPU(X86_64)
+#elif (OS(WINDOWS) || OS(CYGWIN)) && CPU(X86_64)
     struct JITStackFrame {
         void* shadow[4]; // Shadow space reserved for a callee's parameters home addresses
         void* reserved; // Unused, also maintains the 16-bytes stack alignment
@@ -152,10 +152,10 @@ namespace JSC {
         ReturnAddressPtr* returnAddressSlot() { return reinterpret_cast<ReturnAddressPtr*>(this) - 1; }
     };
 #elif CPU(X86)
-#if COMPILER(MSVC) || (OS(WINDOWS) && COMPILER(GCC))
+#if COMPILER(MSVC) || (OS(WINDOWS) && COMPILER(GCC)) || OS(CYGWIN)
 #pragma pack(push)
 #pragma pack(4)
-#endif // COMPILER(MSVC) || (OS(WINDOWS) && COMPILER(GCC))
+#endif // COMPILER(MSVC) || (OS(WINDOWS) && COMPILER(GCC)) || OS(CYGWIN)
     struct JITStackFrame {
         void* reserved; // Unused
         JITStubArg args[6];
@@ -179,9 +179,9 @@ namespace JSC {
         // When JIT code makes a call, it pushes its return address just below the rest of the stack.
         ReturnAddressPtr* returnAddressSlot() { return reinterpret_cast<ReturnAddressPtr*>(this) - 1; }
     };
-#if COMPILER(MSVC) || (OS(WINDOWS) && COMPILER(GCC))
+#if COMPILER(MSVC) || (OS(WINDOWS) && COMPILER(GCC)) || OS(CYGWIN)
 #pragma pack(pop)
-#endif // COMPILER(MSVC) || (OS(WINDOWS) && COMPILER(GCC))
+#endif // COMPILER(MSVC) || (OS(WINDOWS) && COMPILER(GCC)) || OS(CYGWIN)
 #elif CPU(ARM_THUMB2)
     struct JITStackFrame {
         JITStubArg reserved; // Unused
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/jit/JSInterfaceJIT.h	2013-07-02 02:10:28.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/jit/JSInterfaceJIT.h	2013-08-18 22:47:33.726083400 -0500
@@ -57,7 +57,7 @@ namespace JSC {
 #if CPU(X86_64)
         static const RegisterID returnValueRegister = X86Registers::eax;
         static const RegisterID cachedResultRegister = X86Registers::eax;
-#if !OS(WINDOWS)
+#if !OS(WINDOWS) && !OS(CYGWIN)
         static const RegisterID firstArgumentRegister = X86Registers::edi;
 #else
         static const RegisterID firstArgumentRegister = X86Registers::ecx;
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/yarr/YarrJIT.cpp	2013-07-02 02:10:31.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/JavaScriptCore/yarr/YarrJIT.cpp	2013-08-18 23:49:19.841061000 -0500
@@ -87,7 +87,7 @@ class YarrGenerator : private MacroAssem
     static const RegisterID returnRegister = X86Registers::eax;
     static const RegisterID returnRegister2 = X86Registers::edx;
 #elif CPU(X86_64)
-#if !OS(WINDOWS)
+#if !OS(WINDOWS) && !OS(CYGWIN)
     static const RegisterID input = X86Registers::edi;
     static const RegisterID index = X86Registers::esi;
     static const RegisterID length = X86Registers::edx;
@@ -2524,7 +2524,7 @@ class YarrGenerator : private MacroAssem
         push(X86Registers::ebp);
         move(stackPointerRegister, X86Registers::ebp);
         push(X86Registers::ebx);
-#if OS(WINDOWS)
+#if OS(WINDOWS) || OS(CYGWIN)
         if (compileMode == IncludeSubpatterns)
             loadPtr(Address(X86Registers::ebp, 6 * sizeof(void*)), output);
 #endif
@@ -2566,7 +2566,7 @@ class YarrGenerator : private MacroAssem
     void generateReturn()
     {
 #if CPU(X86_64)
-#if OS(WINDOWS)
+#if OS(WINDOWS) || OS(CYGWIN)
         // Store the return value in the allocated space pointed by rcx.
         store64(returnRegister, Address(X86Registers::ecx));
         store64(returnRegister2, Address(X86Registers::ecx, sizeof(void*)));
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/ThirdParty/ANGLE/src/compiler/osinclude.h	2013-07-02 02:10:31.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/ThirdParty/ANGLE/src/compiler/osinclude.h	2013-08-18 14:38:18.142040000 -0500
@@ -18,7 +18,7 @@
       defined(__FreeBSD__) || defined(__OpenBSD__) || \
       defined(__sun) || defined(ANDROID) || \
       defined(__GLIBC__) || defined(__GNU__) || \
-      defined(__QNX__)
+      defined(__QNX__) || defined(__CYGWIN__)
 #define ANGLE_OS_POSIX
 #else
 #error Unsupported platform.
@@ -48,6 +48,9 @@ typedef PRUintn OS_TLSIndex;
 #elif defined(ANGLE_OS_WIN)
 typedef DWORD OS_TLSIndex;
 #define OS_INVALID_TLS_INDEX (TLS_OUT_OF_INDEXES)
+#elif defined(__CYGWIN__)
+typedef pthread_key_t OS_TLSIndex;
+#define OS_INVALID_TLS_INDEX NULL
 #elif defined(ANGLE_OS_POSIX)
 typedef unsigned int OS_TLSIndex;
 #define OS_INVALID_TLS_INDEX 0xFFFFFFFF
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/WTF/WTF.pri	2013-07-02 02:10:31.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/WTF/WTF.pri	2013-08-18 20:30:39.287244400 -0500
@@ -20,7 +20,7 @@ mac {
     }
 }
 
-linux-*:use?(GSTREAMER) {
+use?(GSTREAMER) {
     DEFINES += ENABLE_GLIB_SUPPORT=1
     PKGCONFIG += glib-2.0 gio-2.0
 }
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/WTF/wtf/ExportMacros.h	2013-07-02 02:10:31.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/WTF/wtf/ExportMacros.h	2013-08-18 23:22:12.157962900 -0500
@@ -38,7 +38,7 @@
 // being local to the target being generated, and thus not subject to (e.g.) ELF
 // symbol interposition rules.
 
-#if !PLATFORM(CHROMIUM) && OS(WINDOWS)
+#if !PLATFORM(CHROMIUM) && (OS(WINDOWS) || OS(CYGWIN))
 #define HAVE_INTERNAL_VISIBILITY 1
 #define WTF_INTERNAL
 #elif defined(__GNUC__) && !defined(__CC_ARM) && !defined(__ARMCC__)
@@ -54,7 +54,7 @@
 #define WTF_IMPORT_DECLARATION __declspec(dllimport)
 #define WTF_HIDDEN_DECLARATION
 
-#elif defined(__GNUC__) && !defined(__CC_ARM) && !defined(__ARMCC__)
+#elif defined(__GNUC__) && !defined(__CC_ARM) && !defined(__ARMCC__) && !OS(CYGWIN)
 
 #define WTF_EXPORT_DECLARATION __attribute__((visibility("default")))
 #define WTF_IMPORT_DECLARATION WTF_EXPORT_DECLARATION
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/WTF/wtf/InlineASM.h	2013-07-02 02:10:31.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/WTF/wtf/InlineASM.h	2013-08-18 14:35:11.559368100 -0500
@@ -30,7 +30,7 @@
 
 /* asm directive helpers */ 
 
-#if OS(DARWIN) || (OS(WINDOWS) && CPU(X86))
+#if OS(DARWIN) || ((OS(CYGWIN) || OS(WINDOWS)) && CPU(X86))
 #define SYMBOL_STRING(name) "_" #name
 #else
 #define SYMBOL_STRING(name) #name
@@ -44,7 +44,7 @@
 
 #if (OS(LINUX) || OS(FREEBSD)) && CPU(X86_64)
 #define GLOBAL_REFERENCE(name) #name "@plt"
-#elif CPU(X86) && COMPILER(MINGW)
+#elif CPU(X86) && (COMPILER(MINGW) || OS(CYGWIN))
 #define GLOBAL_REFERENCE(name) "@" #name "@4"
 #else
 #define GLOBAL_REFERENCE(name) SYMBOL_STRING(name)
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/WTF/wtf/NumberOfCores.cpp	2013-07-02 02:10:31.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/WTF/wtf/NumberOfCores.cpp	2013-08-18 23:25:18.684631600 -0500
@@ -32,7 +32,7 @@
 // data types defined in the former. See sysctl(3) and style(9).
 #include <sys/types.h>
 #include <sys/sysctl.h>
-#elif OS(LINUX) || OS(AIX) || OS(SOLARIS)
+#elif OS(LINUX) || OS(AIX) || OS(SOLARIS) || OS(CYGWIN)
 #include <unistd.h>
 #elif OS(WINDOWS) || OS(QNX)
 #include <wtf/UnusedParam.h>
@@ -63,7 +63,7 @@ int numberOfProcessorCores()
     int sysctlResult = sysctl(name, sizeof(name) / sizeof(int), &result, &length, 0, 0);
 
     s_numberOfCores = sysctlResult < 0 ? defaultIfUnavailable : result;
-#elif OS(LINUX) || OS(AIX) || OS(SOLARIS)
+#elif OS(LINUX) || OS(AIX) || OS(SOLARIS) || OS(CYGWIN)
     long sysconfResult = sysconf(_SC_NPROCESSORS_ONLN);
 
     s_numberOfCores = sysconfResult < 0 ? defaultIfUnavailable : static_cast<int>(sysconfResult);
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/WTF/wtf/PageAllocationAligned.cpp	2013-07-02 02:10:32.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/WTF/wtf/PageAllocationAligned.cpp	2013-08-18 14:35:35.390731200 -0500
@@ -50,7 +50,7 @@ PageAllocationAligned PageAllocationAlig
     vm_map(current_task(), &address, size, alignmentMask, flags, MEMORY_OBJECT_NULL, 0, FALSE, protection, PROT_READ | PROT_WRITE | PROT_EXEC, VM_INHERIT_DEFAULT);
     return PageAllocationAligned(reinterpret_cast<void*>(address), size);
 #else
-    size_t alignmentDelta = alignment - pageSize();
+    size_t alignmentDelta = abs(alignment - pageSize());
 
     // Resererve with suffcient additional VM to correctly align.
     size_t reservationSize = size + alignmentDelta;
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/WTF/wtf/Platform.h	2013-07-02 02:10:32.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/WTF/wtf/Platform.h	2013-08-19 14:08:33.483760700 -0500
@@ -329,6 +329,11 @@
 #define WTF_OS_AIX 1
 #endif
 
+/* OS(CYGWIN) - Cygwin */
+#ifdef __CYGWIN__
+#define WTF_OS_CYGWIN 1
+#endif
+
 /* OS(DARWIN) - Any Darwin-based OS, including Mac OS X and iPhone OS */
 #ifdef __APPLE__
 #define WTF_OS_DARWIN 1
@@ -412,6 +417,7 @@
 /* OS(UNIX) - Any Unix-like system */
 #if   OS(AIX)              \
     || OS(ANDROID)          \
+    || OS(CYGWIN)           \
     || OS(DARWIN)           \
     || OS(FREEBSD)          \
     || OS(HURD)             \
@@ -698,6 +704,7 @@
 #endif
 
 #if !OS(WINDOWS) && !OS(SOLARIS) \
+    && !OS(CYGWIN) \
     && !OS(RVCT) \
     && !OS(ANDROID)
 #define HAVE_TM_GMTOFF 1
@@ -782,7 +789,7 @@
 #if PLATFORM(QT)
 /* We must not customize the global operator new and delete for the Qt port. */
 #define ENABLE_GLOBAL_FASTMALLOC_NEW 0
-#if !OS(UNIX)
+#if !OS(UNIX) || OS(CYGWIN)
 #define USE_SYSTEM_MALLOC 1
 #endif
 #endif
@@ -1026,7 +1033,7 @@
 /* Pick which allocator to use; we only need an executable allocator if the assembler is compiled in.
    On x86-64 we use a single fixed mmap, on other platforms we mmap on demand. */
 #if ENABLE(ASSEMBLER)
-#if CPU(X86_64) && !OS(WINDOWS) || PLATFORM(IOS)
+#if CPU(X86_64) && !OS(WINDOWS) && !OS(CYGWIN) || PLATFORM(IOS)
 #define ENABLE_EXECUTABLE_ALLOCATOR_FIXED 1
 #else
 #define ENABLE_EXECUTABLE_ALLOCATOR_DEMAND 1
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/WTF/wtf/ThreadIdentifierDataPthreads.cpp	2013-07-02 02:10:32.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/WTF/wtf/ThreadIdentifierDataPthreads.cpp	2013-08-18 14:37:03.467768900 -0500
@@ -45,7 +45,7 @@
 
 namespace WTF {
 
-pthread_key_t ThreadIdentifierData::m_key = PTHREAD_KEYS_MAX;
+pthread_key_t ThreadIdentifierData::m_key;
 
 void threadDidExit(ThreadIdentifier);
 
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/WTF/wtf/gobject/GlibUtilities.cpp	2013-07-02 02:10:31.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/WTF/wtf/gobject/GlibUtilities.cpp	2013-08-18 23:23:53.761774300 -0500
@@ -28,7 +28,7 @@
 #include <unistd.h>
 #endif
 
-#if OS(LINUX)
+#if OS(LINUX) || OS(CYGWIN)
 CString getCurrentExecutablePath()
 {
     static char readLinkBuffer[PATH_MAX];
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/WebCore/icu/unicode/platform.h	2013-07-02 02:10:39.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/WebCore/icu/unicode/platform.h	2013-08-18 14:38:50.300879400 -0500
@@ -227,8 +227,12 @@
 #endif
 
 #ifndef U_SIZEOF_WCHAR_T
+#ifdef __CYGWIN__
+#define U_SIZEOF_WCHAR_T    2
+#else
 #define U_SIZEOF_WCHAR_T    4
 #endif
+#endif
 
 #ifndef U_HAVE_WCSCPY
 #define U_HAVE_WCSCPY       1
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/WebCore/icu/unicode/umachine.h	2013-07-02 02:10:39.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/WebCore/icu/unicode/umachine.h	2013-08-18 14:39:22.214704800 -0500
@@ -282,7 +282,7 @@ typedef int8_t UBool;
 #       if (U_SIZEOF_WCHAR_T==4)
 #           define U_WCHAR_IS_UTF32
 #       endif
-#   elif defined(U_WINDOWS)
+#   elif defined(U_WINDOWS) || defined(__CYGWIN__)
 #       define U_WCHAR_IS_UTF16
 #   endif
 #endif
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/WebCore/platform/graphics/gstreamer/PlatformVideoWindowPrivate.h	2013-07-02 02:10:38.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/WebCore/platform/graphics/gstreamer/PlatformVideoWindowPrivate.h	2013-08-18 20:18:43.892326100 -0500
@@ -20,6 +20,8 @@
 #ifndef PlatformVideoWindowPrivate_h
 #define PlatformVideoWindowPrivate_h
 
+#if ENABLE(VIDEO) && USE(GSTREAMER) && !defined(GST_API_VERSION_1)
+
 #include <QEvent>
 #include <QTimer>
 
@@ -55,5 +57,5 @@ private:
 
 } // namespace WebCore
 
-
+#endif // ENABLE(VIDEO) && USE(GSTREAMER) && !defined(GST_API_VERSION_1)
 #endif // PlatformVideoWindowPrivate_h
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/WebCore/plugins/PluginDatabase.cpp	2013-07-02 02:10:43.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/WebCore/plugins/PluginDatabase.cpp	2013-08-18 14:40:23.407204800 -0500
@@ -451,7 +451,9 @@ void PluginDatabase::getPluginPathsInDir
     // FIXME: This should be a case insensitive set.
     HashSet<String> uniqueFilenames;
 
-#if defined(XP_UNIX)
+#if defined(__CYGWIN__)
+    String fileNameFilter("*.dll");
+#elif defined(XP_UNIX)
     String fileNameFilter("*.so");
 #else
     String fileNameFilter("");
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/WebKit2/Shared/API/c/WKString.h	2013-07-02 02:10:35.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/WebKit2/Shared/API/c/WKString.h	2013-08-18 17:53:17.197187700 -0500
@@ -36,7 +36,7 @@
 extern "C" {
 #endif
 
-#if !defined(WIN32) && !defined(_WIN32) \
+#if !defined(WIN32) && !defined(_WIN32) && !defined(__CYGWIN__) \
     && !((defined(__CC_ARM) || defined(__ARMCC__)) && !defined(__linux__)) /* RVCT */
     typedef unsigned short WKChar;
 #else
--- origsrc/qtwebkit-opensource-src-5.1.0/Source/WebKit2/UIProcess/Plugins/unix/PluginInfoStoreUnix.cpp	2013-07-02 02:10:35.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Source/WebKit2/UIProcess/Plugins/unix/PluginInfoStoreUnix.cpp	2013-08-18 18:47:30.471264300 -0500
@@ -81,7 +81,11 @@ Vector<String> PluginInfoStore::pluginsD
 Vector<String> PluginInfoStore::pluginPathsInDirectory(const String& directory)
 {
     Vector<String> result;
+#ifdef __CYGWIN__
+    Vector<String> pluginPaths = listDirectory(directory, String("*.dll"));
+#else
     Vector<String> pluginPaths = listDirectory(directory, String("*.so"));
+#endif
     Vector<String>::const_iterator end = pluginPaths.end();
     for (Vector<String>::const_iterator it = pluginPaths.begin(); it != end; ++it) {
         if (fileExists(*it))
--- origsrc/qtwebkit-opensource-src-5.1.0/Tools/qmake/mkspecs/features/unix/default_post.prf	2013-07-02 02:10:48.000000000 -0500
+++ src/qtwebkit-opensource-src-5.1.0/Tools/qmake/mkspecs/features/unix/default_post.prf	2013-08-18 15:20:28.972795300 -0500
@@ -12,7 +12,7 @@ linux-g++*:isEqual(QT_ARCH,i386) {
     QMAKE_CXXFLAGS += -march=pentium4 -msse2 -mfpmath=sse
 }
 
-linux-*g++* {
+linux-*g++*|cygwin-g++* {
     !production_build {
         # Treat warnings as errors on x86/Linux/GCC
         isEqual(QT_ARCH,x86_64)|isEqual(QT_ARCH,i386): QMAKE_CXXFLAGS += -Werror
